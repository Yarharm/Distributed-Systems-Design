package communicate;


/**
* communicate/_ICommunicateStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ICommunicate.idl
* Tuesday, October 13, 2020 11:47:16 PM EDT
*/

public class _ICommunicateStub extends org.omg.CORBA.portable.ObjectImpl implements communicate.ICommunicate
{

  public String addItem (String managerID, String itemID, String itemName, int quantity, int price) throws communicate.ICommunicatePackage.IncorrectUserRoleException, communicate.ICommunicatePackage.ManagerExternalStoreItemException, communicate.ICommunicatePackage.ManagerItemPriceMismatchException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("addItem", true);
                $out.write_wstring (managerID);
                $out.write_wstring (itemID);
                $out.write_wstring (itemName);
                $out.write_long (quantity);
                $out.write_long (price);
                $in = _invoke ($out);
                String $result = $in.read_wstring ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:communicate/ICommunicate/IncorrectUserRoleException:1.0"))
                    throw communicate.ICommunicatePackage.IncorrectUserRoleExceptionHelper.read ($in);
                else if (_id.equals ("IDL:communicate/ICommunicate/ManagerExternalStoreItemException:1.0"))
                    throw communicate.ICommunicatePackage.ManagerExternalStoreItemExceptionHelper.read ($in);
                else if (_id.equals ("IDL:communicate/ICommunicate/ManagerItemPriceMismatchException:1.0"))
                    throw communicate.ICommunicatePackage.ManagerItemPriceMismatchExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return addItem (managerID, itemID, itemName, quantity, price        );
            } finally {
                _releaseReply ($in);
            }
  } // addItem

  public String removeItem (String managerID, String itemID, int quantity) throws communicate.ICommunicatePackage.IncorrectUserRoleException, communicate.ICommunicatePackage.ManagerExternalStoreItemException, communicate.ICommunicatePackage.ManagerRemoveNonExistingItemException, communicate.ICommunicatePackage.ManagerRemoveBeyondQuantityException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("removeItem", true);
                $out.write_wstring (managerID);
                $out.write_wstring (itemID);
                $out.write_long (quantity);
                $in = _invoke ($out);
                String $result = $in.read_wstring ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:communicate/ICommunicate/IncorrectUserRoleException:1.0"))
                    throw communicate.ICommunicatePackage.IncorrectUserRoleExceptionHelper.read ($in);
                else if (_id.equals ("IDL:communicate/ICommunicate/ManagerExternalStoreItemException:1.0"))
                    throw communicate.ICommunicatePackage.ManagerExternalStoreItemExceptionHelper.read ($in);
                else if (_id.equals ("IDL:communicate/ICommunicate/ManagerRemoveNonExistingItemException:1.0"))
                    throw communicate.ICommunicatePackage.ManagerRemoveNonExistingItemExceptionHelper.read ($in);
                else if (_id.equals ("IDL:communicate/ICommunicate/ManagerRemoveBeyondQuantityException:1.0"))
                    throw communicate.ICommunicatePackage.ManagerRemoveBeyondQuantityExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return removeItem (managerID, itemID, quantity        );
            } finally {
                _releaseReply ($in);
            }
  } // removeItem

  public String listItemAvailability (String managerID) throws communicate.ICommunicatePackage.IncorrectUserRoleException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("listItemAvailability", true);
                $out.write_wstring (managerID);
                $in = _invoke ($out);
                String $result = $in.read_wstring ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:communicate/ICommunicate/IncorrectUserRoleException:1.0"))
                    throw communicate.ICommunicatePackage.IncorrectUserRoleExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return listItemAvailability (managerID        );
            } finally {
                _releaseReply ($in);
            }
  } // listItemAvailability

  public void purchaseItem (String customerID, String itemID, String dateOfPurchase) throws communicate.ICommunicatePackage.IncorrectUserRoleException, communicate.ICommunicatePackage.ItemOutOfStockException, communicate.ICommunicatePackage.NotEnoughFundsException, communicate.ICommunicatePackage.ExternalStorePurchaseLimitException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("purchaseItem", true);
                $out.write_wstring (customerID);
                $out.write_wstring (itemID);
                $out.write_wstring (dateOfPurchase);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:communicate/ICommunicate/IncorrectUserRoleException:1.0"))
                    throw communicate.ICommunicatePackage.IncorrectUserRoleExceptionHelper.read ($in);
                else if (_id.equals ("IDL:communicate/ICommunicate/ItemOutOfStockException:1.0"))
                    throw communicate.ICommunicatePackage.ItemOutOfStockExceptionHelper.read ($in);
                else if (_id.equals ("IDL:communicate/ICommunicate/NotEnoughFundsException:1.0"))
                    throw communicate.ICommunicatePackage.NotEnoughFundsExceptionHelper.read ($in);
                else if (_id.equals ("IDL:communicate/ICommunicate/ExternalStorePurchaseLimitException:1.0"))
                    throw communicate.ICommunicatePackage.ExternalStorePurchaseLimitExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                purchaseItem (customerID, itemID, dateOfPurchase        );
            } finally {
                _releaseReply ($in);
            }
  } // purchaseItem

  public String findItem (String customerID, String itemName) throws communicate.ICommunicatePackage.IncorrectUserRoleException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("findItem", true);
                $out.write_wstring (customerID);
                $out.write_wstring (itemName);
                $in = _invoke ($out);
                String $result = $in.read_wstring ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:communicate/ICommunicate/IncorrectUserRoleException:1.0"))
                    throw communicate.ICommunicatePackage.IncorrectUserRoleExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return findItem (customerID, itemName        );
            } finally {
                _releaseReply ($in);
            }
  } // findItem

  public void returnItem (String customerID, String itemID, String dateOfReturn) throws communicate.ICommunicatePackage.IncorrectUserRoleException, communicate.ICommunicatePackage.ItemWasNeverPurchasedException, communicate.ICommunicatePackage.CustomerNeverPurchasedItemException, communicate.ICommunicatePackage.ReturnPolicyException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("returnItem", true);
                $out.write_wstring (customerID);
                $out.write_wstring (itemID);
                $out.write_wstring (dateOfReturn);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:communicate/ICommunicate/IncorrectUserRoleException:1.0"))
                    throw communicate.ICommunicatePackage.IncorrectUserRoleExceptionHelper.read ($in);
                else if (_id.equals ("IDL:communicate/ICommunicate/ItemWasNeverPurchasedException:1.0"))
                    throw communicate.ICommunicatePackage.ItemWasNeverPurchasedExceptionHelper.read ($in);
                else if (_id.equals ("IDL:communicate/ICommunicate/CustomerNeverPurchasedItemException:1.0"))
                    throw communicate.ICommunicatePackage.CustomerNeverPurchasedItemExceptionHelper.read ($in);
                else if (_id.equals ("IDL:communicate/ICommunicate/ReturnPolicyException:1.0"))
                    throw communicate.ICommunicatePackage.ReturnPolicyExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                returnItem (customerID, itemID, dateOfReturn        );
            } finally {
                _releaseReply ($in);
            }
  } // returnItem

  public void addCustomerToWaitQueue (String customerID, String itemID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("addCustomerToWaitQueue", true);
                $out.write_wstring (customerID);
                $out.write_wstring (itemID);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                addCustomerToWaitQueue (customerID, itemID        );
            } finally {
                _releaseReply ($in);
            }
  } // addCustomerToWaitQueue

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:communicate/ICommunicate:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _ICommunicateStub

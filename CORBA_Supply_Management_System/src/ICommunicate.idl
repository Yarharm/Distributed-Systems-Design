module communicate
{
  interface ICommunicate
  {
    exception IncorrectUserRoleException { wstring reason; };
    exception ManagerExternalStoreItemException { wstring reason; };
    exception ManagerItemPriceMismatchException { wstring reason; };
    exception ManagerRemoveNonExistingItemException { wstring reason; };
    exception ManagerRemoveBeyondQuantityException { wstring reason; };
    exception ItemOutOfStockException { wstring reason; };
    exception NotEnoughFundsException { wstring reason; };
    exception ExternalStorePurchaseLimitException { wstring reason; };
    exception ItemWasNeverPurchasedException { wstring reason; };
    exception CustomerNeverPurchasedItemException { wstring reason; };
    exception ReturnPolicyException { wstring reason; };

    wstring addItem(in wstring managerID, in wstring itemID, in wstring itemName, in long quantity, in long price) raises(IncorrectUserRoleException, ManagerExternalStoreItemException, ManagerItemPriceMismatchException);
    wstring removeItem(in wstring managerID, in wstring itemID, in long quantity) raises(IncorrectUserRoleException, ManagerExternalStoreItemException, ManagerRemoveNonExistingItemException, ManagerRemoveBeyondQuantityException);
    wstring listItemAvailability(in wstring managerID) raises(IncorrectUserRoleException);

    void purchaseItem(in wstring customerID, in wstring itemID, in wstring dateOfPurchase) raises(IncorrectUserRoleException, ItemOutOfStockException, NotEnoughFundsException, ExternalStorePurchaseLimitException);
    wstring findItem(in wstring customerID, in wstring itemName) raises(IncorrectUserRoleException);
    void returnItem(in wstring customerID, in wstring itemID, in wstring dateOfReturn) raises(IncorrectUserRoleException, ItemWasNeverPurchasedException, CustomerNeverPurchasedItemException, ReturnPolicyException);

    void addCustomerToWaitQueue(in wstring customerID, in wstring itemID);

    void exchangeItem(in wstring customerID, in wstring newItemID, in wstring oldItemID, in wstring dateOfExchange) raises(IncorrectUserRoleException, ReturnPolicyException, ItemWasNeverPurchasedException, CustomerNeverPurchasedItemException, ExternalStorePurchaseLimitException, ItemOutOfStockException, NotEnoughFundsException);
  };
};